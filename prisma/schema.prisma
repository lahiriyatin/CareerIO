// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(uuid())
  clerkUserId String  @unique // CLERK USER ID
  email       String  @unique
  name        String? // OPTIONAL
  imageUrl    String? // OPTIONAL
  industry    String? // OPTIONAL

  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  /**
   * fields => IndustryInsight MODEL
   * references => User MODEL
   */
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // PROFILE FIELDS
  bio        String? // OPTIONAL
  experience Int? // OPTIONAL
  skills     String[]

  assessments Assessment[]
  resume      Resume?
  coverLetter CoverLetter[]
}

model IndustryInsight {
  id           String @id @default(cuid())
  industry     String @unique
  users        User[] // USERS IN THAT INDUSTRY
  salaryRanges Json[] // ARRAY OF [{ROLE: STRING, MIN: FLOAT, MAX: FLOAT, MEDIAN: FLOAT, LOCATION: STRING?}]

  // INDUSTRY OVERVIEW
  growthRate  Float // GROWTH RATE OF INDUSTRY
  demandLevel DemandLevel // HIGH, MEDIUM, LOW
  topSkills   String[] // MOST POPULAR SKILLS

  // MARKET CONDITIONS
  marketOutlook     MarketOutlook // Positive, Neutral, Negative
  keyTrends         String[] // ARRAY OF INDUSTRY TRENDS
  recommendedSkills String[] // ARRAY OF RECOMMENDED SKILLS FOR INDUSTRY
  lastUpdated       DateTime      @default(now())
  nextUpdate        DateTime // SCHEDULED NEXT UPDATE

  @@index([industry])
}

model Assessment {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  quizScore      Float // OVERALL QUIZ SCORE
  questions      Json[] // ARRAY OF QUESTIONS [{ QUESTION, ANSWER, USER_ANSWER, IS_CORRECT }]
  category       String // "DESIGN", "DEVELOPMENT", "MARKETING", "BUSINESS"
  improvementTip String? // AI-GENERATED IMPROVEMENT TIP
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId]) // INDEX ON USER ID TO SPEED UP QUERIES
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique // ONE RESUME PER USER
  user      User     @relation(fields: [userId], references: [id])
  content   String   @db.Text // MARKDOWN CONTENT
  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  content        String // MARKDOWN CONTENT
  jobDescription String?
  companyName    String // COMPANY NAME
  jobTitle       String // POSITION APPLYING FOR
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}
